---
description: "JavaScript best practices, modern patterns, and development guidelines"
globs: ["**/*.{js,jsx,ts,tsx,mjs,cjs}"]
alwaysApply: false
---

# JavaScript Rules

## Modern JavaScript Syntax
- Use ES6+ features: const/let instead of var, arrow functions, destructuring, template literals
- Prefer const for variables that don't change, let for variables that do
- Use arrow functions for short functions and callbacks, regular functions for methods and constructors
- Use destructuring assignment for objects and arrays when it improves readability
- Use template literals for string interpolation instead of concatenation
- Use optional chaining (?.) and nullish coalescing (??) for safer property access

## Functions and Code Organization
- Write pure functions when possible - same input always produces same output, no side effects
- Keep functions small and focused on a single responsibility
- Use descriptive function and variable names that explain intent
- Prefer early returns to reduce nesting and improve readability
- Use default parameters instead of checking for undefined values
- Avoid deeply nested callbacks - use async/await or promises instead

## Asynchronous JavaScript
- Use async/await instead of promise chains for better readability
- Always handle errors in async functions with try/catch blocks
- Use Promise.all() for concurrent operations that don't depend on each other
- Use Promise.allSettled() when you need results from all promises regardless of failures
- Avoid mixing async/await with .then() chains in the same function
- Use proper error handling for network requests and API calls

## Error Handling
- Use try/catch blocks for error-prone operations
- Create meaningful error messages that help with debugging
- Use custom error classes for different types of errors
- Handle errors at the appropriate level - don't let them bubble up unnecessarily
- Log errors appropriately for debugging while avoiding sensitive data exposure
- Provide fallback behavior when operations fail

## Performance and Optimization
- Avoid unnecessary re-renders and computations
- Use debouncing for expensive operations triggered by user input
- Prefer modern array methods (map, filter, reduce) over traditional loops when appropriate
- Use object and array destructuring to minimize property access
- Avoid creating functions inside render loops or frequent callbacks
- Use memoization for expensive calculations that repeat with same inputs
- **Use modern performance APIs**: `requestIdleCallback` for non-critical tasks, `requestAnimationFrame` for smooth animations
- **Respect user preferences**: Check `prefers-reduced-motion` to disable animations for users who prefer reduced motion
- **Optimize font loading**: Prefer system fonts over web fonts to eliminate network requests and improve LCP
- **Optimize resource hints**: Use `preconnect`, `dns-prefetch`, and `preload` for critical external resources

## DOM Manipulation and Events
- Use modern DOM methods (querySelector, querySelectorAll) over older methods
- Add event listeners properly and clean them up to prevent memory leaks
- Use event delegation for dynamic content instead of attaching many individual listeners
- Debounce scroll, resize, and input events to improve performance
- Use passive event listeners for scroll and touch events when possible
- Prefer data attributes over classes for storing element-specific data
- **Implement proper focus management**: Move focus to appropriate elements when opening/closing modals or menus
- **Use proper DOM ready detection**: Check `document.readyState` and use `DOMContentLoaded` for initialization
- **Handle click-outside patterns**: Add document click listeners to close dropdowns/modals when clicking outside
- **Implement keyboard navigation**: Support arrow keys, Escape, Enter, and Home/End for interactive components
- **Manage focus trapping**: Ensure focus stays within modals and dropdowns during keyboard navigation

## Accessibility Implementation
- **ARIA state management**: Toggle `aria-expanded`, `aria-hidden`, and other ARIA attributes based on component state
- **Focus restoration**: Return focus to triggering element when closing modals, dropdowns, or overlays
- **Skip link functionality**: Implement skip-to-main-content links that move focus to main content area
- **Screen reader announcements**: Use `aria-live` regions for dynamic content updates
- **Keyboard event handling**: Implement proper keyboard shortcuts (Escape to close, Enter/Space for activation)
- **Focus indicators**: Ensure programmatically focused elements have visible focus indicators
- **Mobile menu patterns**: Implement proper focus management for hamburger menus with arrow key navigation
- **Smooth scroll accessibility**: Add temporary `tabindex="-1"` to scroll targets for focus management

## Data Handling
- Use immutable data patterns - don't mutate original objects/arrays
- Use spread operator or Object.assign() for shallow copying
- Use proper deep cloning when needed (structuredClone or library methods)
- Validate data types and structure, especially from external sources
- Use consistent data transformation patterns throughout the application
- Handle null, undefined, and empty values explicitly

## File Size and Code Organization
- **Keep files manageable**: Aim for under 300 lines of code per file - anything above makes maintenance harder
- **Split large files**: Break code into modules rather than having files longer than 100-200 lines
- **Single Responsibility Principle**: Each module should have only one reason to change - one responsibility
- **Separation of Concerns**: Separate different functionalities into distinct modules (API calls, validation, UI logic)
- **Extract reusable logic**: Move repeated patterns into separate utility modules
- **Avoid "God files"**: Don't put all utilities, API calls, validation, and business logic in one massive file
- **Use meaningful file names**: Files should clearly indicate their single purpose
- **Group related functions**: Put functions that change for the same reasons together

## Code Quality and Maintainability
- Use consistent naming conventions (camelCase for variables, PascalCase for constructors)
- Write self-documenting code that explains the "why" not just the "what"
- Use JSDoc comments for complex functions and public APIs
- Avoid magic numbers and strings - use named constants
- Use meaningful variable names even for short-lived variables
- Group related functionality into modules or classes
- **Keep functions small**: Aim for methods no more than 10 lines for better readability and reduced complexity

## Browser Compatibility and Standards
- Use feature detection instead of browser detection when needed
- Understand which ES6+ features need polyfills for your target browsers
- Use progressive enhancement - ensure basic functionality works without JavaScript
- Test across different browsers and devices, especially mobile
- Use standard Web APIs when available instead of third-party libraries
- Be mindful of bundle size and only include necessary polyfills

## Security Considerations
- Sanitize user input and validate data on both client and server
- Use textContent instead of innerHTML when inserting user-generated content
- Be cautious with eval() and avoid it when possible
- Use HTTPS for all network requests in production
- Don't store sensitive data in localStorage or expose it in client-side code
- Validate and sanitize data before sending to APIs

## Testing and Debugging
- Write testable code by avoiding global dependencies and side effects
- Use descriptive test names that explain the expected behavior
- Mock external dependencies in tests to ensure isolation
- Use browser developer tools effectively for debugging
- Add meaningful console logs for development but remove or gate them for production
- Use proper error boundaries and fallbacks for production applications

## Framework-Agnostic Patterns
- Separate business logic from UI logic
- Use dependency injection or similar patterns for testing
- Implement proper state management patterns
- Use observer pattern for loose coupling between components
- Implement proper cleanup for subscriptions and timers
- Use factory functions or classes for creating similar objects